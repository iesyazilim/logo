//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IesGatewayGeneral
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryResponse", Namespace="http://schemas.datacontract.org/2004/07/Ies.Gateway.Service")]
    public partial class QueryResponse : object
    {
        
        private string ErrorField;
        
        private bool IsSuccessField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                this.ErrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess
        {
            get
            {
                return this.IsSuccessField;
            }
            set
            {
                this.IsSuccessField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultipleQueryResponse", Namespace="http://schemas.datacontract.org/2004/07/Ies.Gateway.Service")]
    public partial class MultipleQueryResponse : object
    {
        
        private string ErrorField;
        
        private bool IsSuccessField;
        
        private System.Collections.Generic.List<string> ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                this.ErrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess
        {
            get
            {
                return this.IsSuccessField;
            }
            set
            {
                this.IsSuccessField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IesGatewayGeneral.IGeneralSvc")]
    public interface IGeneralSvc
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneralSvc/GetQuery", ReplyAction="http://tempuri.org/IGeneralSvc/GetQueryResponse")]
        IesGatewayGeneral.QueryResponse GetQuery(string query, string paramaters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneralSvc/GetQuery", ReplyAction="http://tempuri.org/IGeneralSvc/GetQueryResponse")]
        System.Threading.Tasks.Task<IesGatewayGeneral.QueryResponse> GetQueryAsync(string query, string paramaters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneralSvc/GetMultipleQuery", ReplyAction="http://tempuri.org/IGeneralSvc/GetMultipleQueryResponse")]
        IesGatewayGeneral.MultipleQueryResponse GetMultipleQuery(string query, string paramaters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneralSvc/GetMultipleQuery", ReplyAction="http://tempuri.org/IGeneralSvc/GetMultipleQueryResponse")]
        System.Threading.Tasks.Task<IesGatewayGeneral.MultipleQueryResponse> GetMultipleQueryAsync(string query, string paramaters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IGeneralSvcChannel : IesGatewayGeneral.IGeneralSvc, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class GeneralSvcClient : System.ServiceModel.ClientBase<IesGatewayGeneral.IGeneralSvc>, IesGatewayGeneral.IGeneralSvc
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public GeneralSvcClient() : 
                base(GeneralSvcClient.GetDefaultBinding(), GeneralSvcClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IGeneralSvc.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GeneralSvcClient(EndpointConfiguration endpointConfiguration) : 
                base(GeneralSvcClient.GetBindingForEndpoint(endpointConfiguration), GeneralSvcClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GeneralSvcClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(GeneralSvcClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GeneralSvcClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(GeneralSvcClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GeneralSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public IesGatewayGeneral.QueryResponse GetQuery(string query, string paramaters)
        {
            return base.Channel.GetQuery(query, paramaters);
        }
        
        public System.Threading.Tasks.Task<IesGatewayGeneral.QueryResponse> GetQueryAsync(string query, string paramaters)
        {
            return base.Channel.GetQueryAsync(query, paramaters);
        }
        
        public IesGatewayGeneral.MultipleQueryResponse GetMultipleQuery(string query, string paramaters)
        {
            return base.Channel.GetMultipleQuery(query, paramaters);
        }
        
        public System.Threading.Tasks.Task<IesGatewayGeneral.MultipleQueryResponse> GetMultipleQueryAsync(string query, string paramaters)
        {
            return base.Channel.GetMultipleQueryAsync(query, paramaters);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IGeneralSvc))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IGeneralSvc))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost/IesGateway/Service");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return GeneralSvcClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IGeneralSvc);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return GeneralSvcClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IGeneralSvc);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IGeneralSvc,
        }
    }
}
